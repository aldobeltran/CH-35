:root {
    /* --nombre-variable */
    
    --font-primary: 'Poppins', sans-serif;/*-Esto es modificado de las rules de google fonts-*/
    --color-primary: #A60311;
    --color-secondary: #D9042B;
    --color-text-primary: #D9CCB4;
    --color-text-secondary: #D98E04;
    --color-background: #590219;
    --color-light: #F2F2F2;
    --color-dark: #070C26;
/*-Esto salio de adobe colors-*/
}

body{
    background-color: var(--color-background);
    color:var(--color-light);
    font-family: var(--font-primary);
}
.position{
    width: 100px;
    height: 100px;
    background-color: var(--color-dark);
}
/* 
    La posicion estatica por default del html, no se afecta por todo, buttom, left ni right de ningun
    */
#static{
    position: static;
    top: 200px;
    bottom: 200px;
    left: 200px;
    right: 200px;
    background-color: var(--color-text-secondary);

}
/*Es posicionado de forma relativa al elemento anterior o posicion original y si permite movimiento mediante top,bottom,left,right*/
#relative{
    position:relative;
    top: 500px;
    left: 300px;

    background-color: var(--color-primary);
}
#absolute{
    /*Se  posiciona de forma relativa a su ancestro(elemento mas cercano) mas cercano y no con respecto al view port*/
    position: absolute;
    top: 50px;
    bottom: 20px;
    left: 200px;
    right: 220px;
    background-color: var(--color-light);
    color: var(--color-dark);
}
/*Este sera el ancestro sobre el cual se movera el hijo*/
#ancestro{
    position: absolute;
    width: 100px;
    height: 100px;
    background-color:var(--color-dark);
    border: solid var(--color-light) 1px;
}

/* Nos permite mantener el elemento de manera fija en el viewport
#fixed {
    left: 350px;
    top: 500px;
    position: fixed;
    background-color:rgb(73, 129, 233);   
}*/
#chat{
    position: fixed;
    top: 520px;
    left: 370px;
    border: var(--color-light) 1px;
    width: 60px;
    height: 60px;
}
#Whatsapp-icon{
    width: 100%;

}
.display-inline {
    width: 100px;
    height: 100px;
    background-color: var(--color-text-primary);
    color: var(--color-dark);
    text-align: center;
    margin: 2px;
}
#display-1, #display-2{
    display: inline;

}
.display-block {
    /*display: block;*/
    display: inline-block;

    width: 100px;
    height: 100px;
    background-color: var(--color-secondary);
    text-align: center;
    margin: 2px;
}
@media (max-width: 720px){}
    .display-none{
        display: none;
    }

.container{
    /*Display flex. Me permite trabajar de manera flexible con elementos anidados dentro de un ancestro. El flexbox se aplica en el container y tiene efecto sobre los hijos.
    Por default la direccion de flex es en filas(row).
    Vamos a poder acceder a diversas propiedades para modificar el comportamiento de los elementos.
    > - flex-direction: column, column-reverse, row, row-reverse.
    Justify-content: center, flex-start, flex-end, space between, space arround , 
    Align-item: start, end, center.()Alinea loselementos.
    Align-self: flex-start, flex-end
    */
    display: flex;
    /*flex-direction:row-reverse;*//*los mueve a la inversa*/
    /*flex-direction: column-reverse;*//*mueve la columna a la inversa*/
    flex-direction: column;
    flex-wrap: wrap;/*wrap los acomoda en columnas y nowrap deja que se siga de largo*/
    /*justify-content: space-around;
    align-items: center;Manera correcta de centrar un div*/
    width: auto;
    height: 350px;
    margin: 10px;
    padding: 15px;
    border-radius: 10px;
    background-color: var(--color-text-secondary);
}

.display-flex{
    /*Se adapta al display*/
    width: 100px;
    height: 80px;
    margin: 5px;
    padding: 2px;
    text-align: center;
    background-color: var(--color-background);
    border-radius: 6px;
}

.item-6{
    align-self: center;/*Se aplica a solo un elemento y alinear individualmente*/
}
.display-flex{
    display: flex;
    justify-content: center;
    align-items: center;
}
a {
    text-decoration: none;
    color: var(--color-light);
}
/*Grid layout
Elementos de una cuadricua, items, celdas, area
display:grid;
*/
.grid {
    display: grid;
    grid-template-columns: auto auto auto;/*por cada automatic se hace otra columna, se ajusta a display, dependiendo el que vaya primero es la jerarquia*/
    /*grid-template-rows: auto auto ;*/

    gap: 20px;/*Se separan*/

    padding: 10px;
}

.display-grid {
    background-color: var(--color-text-secondary);
    border-radius: 3px;
    padding: 20px;
    text-align: center;
    border: solid var(--color-text-primary) 1px;
}

.container-1 {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: 1fr 2fr 2fr 1fr;
    grid-template-areas: 
        "head head head"
        "aside section section"
        "aside article article"
        "footer footer footer"
    ;

    width: auto;
    height: 500px;
    border: solid var(--color-text-primary) 0.7px;
    text-align: center;
    margin: 10px;
    font-size: 18px;
}

header {
    background-color:darkviolet;
    grid-area: head;
}

aside {
    background-color: seagreen;
    grid-area: aside;
}

section {
    background-color: peru;
    grid-area: section;
}

article {
    background-color: tomato;
    grid-area: article;
}

footer {
    background-color: deepskyblue;
    grid-area: footer;
}

@media (max-width: 720px) {
    .container-1 {
        display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: repeat(5, 2fr);
        grid-template-areas: 
            "head"
            "aside"
            "section"
            "article"
            "footer"
        ;
    
        width: auto;
        height: 500px;
        border: solid var(--color-text-primary) 0.7px;
        text-align: center;
        margin: 10px;
        font-size: 18px;
    }
}